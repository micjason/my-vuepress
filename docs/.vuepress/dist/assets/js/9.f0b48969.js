(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{382:function(a,n,e){"use strict";e.r(n);var r=e(46),t=Object(r.a)({},(function(){var a=this,n=a.$createElement,e=a._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("1."),e("code",[a._v("#!/bin/bash")]),a._v(" "),e("code",[a._v('echo "Hello World !"')]),a._v("\n#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。\necho 命令用于向窗口输出文本。\n2."),e("code",[a._v("./test.sh")]),a._v("  #执行脚本\n一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找\n3.定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：\n"),e("code",[a._v('your_name="runoob.com"')]),a._v("\n4.使用一个定义过的变量，只要在变量名前面加美元符号即可，如：\n"),e("code",[a._v('your_name="qinjx"')]),a._v(" "),e("code",[a._v("echo $your_name")]),a._v(" "),e("code",[a._v("echo ${your_name}")]),a._v("\n变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\n"),e("code",[a._v('for skill in Ada Coffe Action Java; do echo "I am good at ${skill}Script" done')]),a._v('\n已定义的变量，可以被重新定义，如：\nyour_name="tom"\necho $your_name\nyour_name="alibaba"\necho $your_name\n这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符（$）。\n5.使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。\n#!/bin/bash\nmyUrl="https://www.google.com"\nreadonly myUrl\nmyUrl="https://www.runoob.com"\n6.使用 unset 命令可以删除变量。语法：\nunset variable_name  变量被删除后不能再次使用。unset 命令不能删除只读变量。\n7.Shell 字符串：字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。\n7.1 单引号\n'),e("code",[a._v("str='this is a string'")]),a._v("\n单引号字符串的限制：")]),a._v(" "),e("p",[a._v("单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n双引号\n"),e("code",[a._v('your_name=\'runoob\' str="Hello, I know you are \\"$your_name\\"! \\n" echo -e $str')]),a._v("\n输出结果为："),e("code",[a._v('Hello, I know you are "runoob"!')]),a._v("\n双引号的优点：")]),a._v(" "),e("p",[a._v('双引号里可以有变量\n双引号里可以出现转义字符\n拼接字符串\nyour_name="runoob"')]),a._v(" "),e("h1",{attrs:{id:"使用双引号拼接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用双引号拼接"}},[a._v("#")]),a._v(" 使用双引号拼接")]),a._v(" "),e("p",[a._v('greeting="hello, "$your_name" !"\ngreeting_1="hello, ${your_name} !"\necho $greeting  $greeting_1')]),a._v(" "),e("h1",{attrs:{id:"使用单引号拼接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用单引号拼接"}},[a._v("#")]),a._v(" 使用单引号拼接")]),a._v(" "),e("p",[a._v("greeting_2='hello, '$your_name' !'\ngreeting_3='hello, ${your_name} !'\necho $greeting_2  $greeting_3\n输出结果为：\nhello, runoob ! hello, runoob !\nhello, runoob ! hello, ${your_name} !\n8.获取字符串长度\nstring=\"abcd\"\necho ${#string} #输出 4\n9.提取子字符串\n以下实例从字符串第 2 个字符开始截取 4 个字符：\nstring=\"runoob is a great site\"\necho ${string:1:4} # 输出 unoo  注意：第一个字符的索引值为 0。\n10.查找子字符串\n查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\nstring=\"runoob is a great site\"\necho "),e("code",[a._v('expr index "$string" io')]),a._v("  # 输出 4\n11.Shell 数组\nbash支持一维数组（不支持多维数组），并且没有限定数组的大小。")]),a._v(" "),e("p",[a._v('类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。\n在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：\n数组名=(值1 值2 ... 值n)\narray_name=(value0 value1 value2 value3)\narray_name=(\nvalue0\nvalue1\nvalue2\nvalue3\n)\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen\n12.读取数组\n读取数组元素值的一般格式是：${数组名[下标]} valuen=${array_name[n]}\n使用 @ 符号可以获取数组中的所有元素，例如：echo ${array_name[@]}\n13.获取数组的长度\n获取数组长度的方法与获取字符串长度的方法相同，例如：')]),a._v(" "),e("h1",{attrs:{id:"取得数组元素的个数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取得数组元素的个数"}},[a._v("#")]),a._v(" 取得数组元素的个数")]),a._v(" "),e("p",[a._v("length=${#array_name[@]}")]),a._v(" "),e("h1",{attrs:{id:"或者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#或者"}},[a._v("#")]),a._v(" 或者")]),a._v(" "),e("p",[a._v("length=${#array_name[*]}")]),a._v(" "),e("h1",{attrs:{id:"取得数组单个元素的长度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取得数组单个元素的长度"}},[a._v("#")]),a._v(" 取得数组单个元素的长度")]),a._v(" "),e("p",[a._v("lengthn=${#array_name[n]}\n14.Shell 注释\n以 # 开头的行就是注释，会被解释器忽略。")]),a._v(" "),e("p",[a._v("通过每一行加一个 # 号设置多行注释，像这样：\n#--------------------------------------------")]),a._v(" "),e("h1",{attrs:{id:"这是一个注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这是一个注释"}},[a._v("#")]),a._v(" 这是一个注释")]),a._v(" "),e("h1",{attrs:{id:"author-菜鸟教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#author-菜鸟教程"}},[a._v("#")]),a._v(" author：菜鸟教程")]),a._v(" "),e("h1",{attrs:{id:"site-www-runoob-com"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#site-www-runoob-com"}},[a._v("#")]),a._v(" site：www.runoob.com")]),a._v(" "),e("h1",{attrs:{id:"slogan-学的不仅是技术-更是梦想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slogan-学的不仅是技术-更是梦想"}},[a._v("#")]),a._v(" slogan：学的不仅是技术，更是梦想！")]),a._v(" "),e("p",[a._v("#--------------------------------------------")]),a._v(" "),e("h5",{attrs:{id:"用户配置区-开始"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户配置区-开始"}},[a._v("#")]),a._v(" 用户配置区 开始")]),a._v(" "),e("h1",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),e("h1",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),e("h1",{attrs:{id:"这里可以添加脚本描述信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这里可以添加脚本描述信息"}},[a._v("#")]),a._v(" 这里可以添加脚本描述信息")]),a._v(" "),e("h1",{attrs:{id:"-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),e("h1",{attrs:{id:"-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[a._v("#")])]),a._v(" "),e("h5",{attrs:{id:"用户配置区-结束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户配置区-结束"}},[a._v("#")]),a._v(" 用户配置区 结束")]),a._v(" "),e("p",[a._v("多行注释\n多行注释还可以使用以下格式：\n:<<EOF\n注释内容...\n注释内容...\n注释内容...\nEOF\nEOF 也可以使用其他符号:\n:<<'\n注释内容...\n注释内容...\n注释内容...\n'")]),a._v(" "),e("p",[a._v(":<<!\n注释内容...\n注释内容...\n注释内容...\n!")])])}),[],!1,null,null,null);n.default=t.exports}}]);